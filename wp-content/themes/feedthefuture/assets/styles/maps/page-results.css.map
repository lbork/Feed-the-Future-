{"version":3,"sources":["page-results.scss","mixins/pseudo.scss","functions/unit.scss","mixins/reset-list.scss","mixins/null-margins.scss","variables/typography.scss","mixins/respond-to.scss"],"names":[],"mappings":"AA+BA,sBC9BE,WADyD,AAEzD,cAF2B,AAG3B,gBD8B8B,AAC5B,+DAAoC,AACpC,sBAAsB,AACtB,YAAY,AACZ,kBEpCyB,AFqCzB,iBAAiB,AACjB,kBAAkB,AAClB,wBAA8B,AAC9B,UAAW,CAkDZ,AAOH,wBGjGE,gBAAgB,AAChB,SAAU,CHkGX,AAED,6CIpGI,YAAa,CACd,AJmGH,4CIhGI,eAAgB,CACjB,AJ+FH,gCAII,cAAmB,CACpB,AAGH,qCACE,iBAAiB,AACjB,eK1GqB,CL2GtB,AAED,2BACE,cAAc,AACd,iBAAkB,CAMnB,AARD,+BAKI,YAAY,AACZ,UAAW,CACZ,AA/EC,yHAZJ,sBAaM,oDAAuB,CA+C1B,CAAA,AMpFC,wBNwBJ,sBAiBM,wDAAuB,CA2C1B,CAAA,AAxCC,+GApBJ,sBAqBM,2DAAuB,CAuC1B,CAAA,AMpFC,2BNwBJ,sBAyBM,yDAAuB,CAmC1B,CAAA,AAhCC,qHA5BJ,sBA6BM,4DAAuB,CA+B1B,CAAA,AMpFC,2BNwBJ,sBAiCM,+DAAuB,CA2B1B,CAAA,AAxBC,qHApCJ,sBAqCM,kEAAuB,CAuB1B,CAAA,AMpFC,wBNwBJ,sBAyCM,wDAAuB,CAmB1B,CAAA,AAhBC,+GA5CJ,sBA6CM,2DAAuB,CAe1B,CAAA,AMpFC,0BNwBJ,sBAiDM,0DAAuB,CAW1B,CAAA,AARC,mHApDJ,sBAqDM,6DAAuB,CAO1B,CAAA,AAJC,2BAxDJ,sBAyDM,eAAe,AACf,iBAAkB,CAErB,CAAA","file":"../page-results.css","sourcesContent":["@import \"variables/animation.scss\";\n@import \"variables/colors.scss\";\n@import \"variables/layout.scss\";\n@import \"variables/routes.scss\";\n@import \"variables/typography.scss\";\n@import \"functions/px-to-rem.scss\";\n@import \"functions/unit.scss\";\n@import \"functions/width.scss\";\n@import \"mixins/a11y.scss\";\n@import \"mixins/arrow-link.scss\";\n@import \"mixins/article-heading.scss\";\n@import \"mixins/caption.scss\";\n@import \"mixins/clearfix.scss\";\n@import \"mixins/dropdown-image.scss\";\n@import \"mixins/featured-flag.scss\";\n@import \"mixins/hide-text.scss\";\n@import \"mixins/hover-underline.scss\";\n@import \"mixins/hover.scss\";\n@import \"mixins/null-margins.scss\";\n@import \"mixins/placeholder.scss\";\n@import \"mixins/pseudo.scss\";\n@import \"mixins/reset-button.scss\";\n@import \"mixins/reset-list.scss\";\n@import \"mixins/respond-to.scss\";\n@import \"mixins/sidebar-image.scss\";\n@import \"mixins/smooth-text.scss\";\n\n/*\n * stats\n */\n\n.results-stats {\n  &::after {\n    @include pseudo($pos: static);\n    background: url(#{$path}/images/results-stats.jpg) no-repeat 50% 100%;\n    background-size: cover;\n    height: 51vw;\n    margin-left: unit(-1);\n    margin-top: -14vw;\n    position: relative;\n    width: calc(100% + #{unit(2)});\n    z-index: -1;\n\n    @media (min-resolution: 120dpi) and (max-width: map-get($breakpoints, 'small--down')) {\n      background-image: url(#{$path}/images/results-stats@2x.jpg);\n    }\n\n    @include respond-to('small') {\n      background-image: url(#{$path}/images/results-stats--small.jpg);\n    }\n\n    @media (min-resolution: 120dpi) and (min-width: map-get($breakpoints, 'small')) {\n      background-image: url(#{$path}/images/results-stats--small@2x.jpg);\n    }\n\n    @include respond-to('medium') {\n      background-image: url(#{$path}/images/results-stats--medium.jpg);\n    }\n\n    @media (min-resolution: 120dpi) and (min-width: map-get($breakpoints, 'medium')) {\n      background-image: url(#{$path}/images/results-stats--medium@2x.jpg);\n    }\n\n    @include respond-to('medium-large') {\n      background-image: url(#{$path}/images/results-stats--medium-large.jpg);\n    }\n\n    @media (min-resolution: 120dpi) and (min-width: map-get($breakpoints, 'medium-large')) {\n      background-image: url(#{$path}/images/results-stats--medium-large@2x.jpg);\n    }\n\n    @include respond-to('large') {\n      background-image: url(#{$path}/images/results-stats--large.jpg);\n    }\n\n    @media (min-resolution: 120dpi) and (min-width: map-get($breakpoints, 'large')) {\n      background-image: url(#{$path}/images/results-stats--large@2x.jpg);\n    }\n\n    @include respond-to('x-large') {\n      background-image: url(#{$path}/images/results-stats--x-large.jpg);\n    }\n\n    @media (min-resolution: 120dpi) and (min-width: map-get($breakpoints, 'x-large')) {\n      background-image: url(#{$path}/images/results-stats--x-large@2x.jpg);\n    }\n\n    @media (min-width: 107.5em) {\n      height: 87.6rem;\n      margin-top: -24rem;\n    }\n  }\n}\n\n/*\n * results\n */\n\n.results-progress__list {\n  @include reset-list;\n}\n\n.results-progress__list__item {\n  @include null-margins;\n\n  p {\n    margin: unit(0.2) 0;\n  }\n}\n\n.results-progress__item__measurement {\n  font-size: 1.2rem;\n  font-weight: $font-weight--bold;\n}\n\n.results-progress__sidebar {\n  display: block;\n  position: relative;\n\n  img {\n    height: auto;\n    width: 100%;\n  }\n}\n","@mixin pseudo($display: block, $pos: absolute, $content: '') {\n  content: $content;\n  display: $display;\n  position: $pos;\n}\n","@function unit($multiplier) {\n  @return $unit * $multiplier;\n}\n","@mixin reset-list {\n  list-style: none;\n  padding: 0;\n}\n","@mixin null-margins {\n  > :first-child {\n    margin-top: 0;\n  }\n\n  > :last-child {\n    margin-bottom: 0;\n  }\n}\n","$font-family--sans: 'Work Sans', sans-serif;\n$font-family--serif: 'Playfair Display', serif;\n$font-family--kapra-condensed: 'Kapra Neue Condensed';\n$font-family--kapra-expanded: 'Kapra Neue Expanded';\n\n$font-weight--normal: 300;\n$font-weight--bold: 500;\n","@mixin respond-to($breakpoint) {\n  // Retrieves the value from the key\n  $value: map-get($breakpoints, $breakpoint);\n\n  // If the key exists in the map\n  @if $value != null {\n    // Prints a media query based on the value\n    @media (min-width: $value) {\n      @content;\n    }\n  }\n\n  // If the key doesn't exist in the map\n  @else {\n    @warn 'Unfortunately,\n      no value could be retrieved from `#{$breakpoint}`. ' + 'Please make sure it is defined in `$breakpoints` map.';\n  }\n}\n"]}